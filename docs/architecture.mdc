# Tài liệu Kiến trúc Frontend: Social Blog App

Tài liệu này định nghĩa kiến trúc tổng thể, các công nghệ nền tảng và các quy ước cho dự án frontend. Nó là bản thiết kế chính để AI agent và các quy tắc trong `.cursorrules` tuân theo.

## 1. Công nghệ nền tảng (Tech Stack)

- **Framework:** React 18+ & TypeScript
- **Công cụ Build:** Vite
- **Styling:** Tailwind CSS 3
- **Routing:** React Router v6 (`react-router-dom`)
- **Gọi API:** Axios
- **Quản lý State Toàn cục:** **Zustand** là lựa chọn duy nhất cho state global.
- **Thư viện Icons:** `react-icons`
- **Quản lý Class:** `clsx` và `tailwind-merge` để xử lý class có điều kiện.
- **Real-time:** `socket.io-client`

## 2. Cấu trúc Thư mục

Dự án tuân thủ cấu trúc dựa trên chức năng (feature-based).
/src
├── api/
│ ├── axiosConfig.ts # ✨ Cấu hình instance Axios global
│ └── postService.ts # ✨ Ví dụ: export const getPosts = async () => { ... }
│ └── notificationService.ts # Service cho API RESTful của notification
├── sockets/
│   └── socketService.ts     # ✨ Quản lý kết nối và sự kiện Socket.IO
│
├── components/
│ ├── common/ # ✨ Button.tsx, Input.tsx, Modal.tsx, Spinner.tsx
│ └── layout/ # ✨ Navbar.tsx, Sidebar.tsx, MainLayout.tsx
│
├── features/
│   ├── auth/
│   ├── post/
│   ├── navigation/
│   │   └── components/       # SidebarNav, UserProfileMenu
│   ├── explore/              # ✨ Feature mới
│   │   ├── components/       # TrendingTopics.tsx
│   │   └── ExplorePanel.tsx  # Component chính cho cột phải
│   ├── notifications/        # ✨ Feature mới
│   │   ├── components/       # NotificationItem.tsx
│   │   └── NotificationsPanel.tsx
|   ├── layout/ # ✨ Mới: Chứa các phần của bố cục chính
│   │ ├── components/ # MainLayout.tsx, SidebarNav.tsx, RightSidebar.tsx
│   ├── feed/ # ✨ Đổi tên từ 'post' để rõ ràng hơn
│   │ ├── components/ # FeedTimeline.tsx, CreatePostForm.tsx, PostCard.tsx
│   │ └── FeedPage.tsx # Trang chính, sẽ được render trong Outlet
│   ├── profile/ # ✨ Feature mới
│   │ └── ProfilePage.tsx # Trang cá nhân, sẽ được render trong Outlet
│   ├── right_sidebar_panels/ # ✨ Mới: Chứa các component cho cột phải
│   │ ├── DefaultWidgetsPanel.tsx
│   │ ├── ExplorePanel.tsx
│   │ └── NotificationsPanel.tsx
│    └── ... (auth, etc.)
│ 
├── stores/
│ ├── authStore.ts
│ └── rightSidebarStore.ts # ✨ Mới: Store để quản lý cột phải
├── hooks/ # Hooks tái sử dụng toàn cục
│ └── useAuthStatus.ts
│
├── lib/ or utils/ # Hàm tiện ích thuần túy
│ └── formatDate.ts
│
├── providers/ # React Context Providers (nếu cần)
│
├── stores/ # Định nghĩa các store của Zustand
│ └── authStore.ts
│
├── App.tsx # Logic routing chính
└── main.tsx



## 3. Luồng dữ liệu và Quản lý State

- **State Toàn cục (Zustand):** Chỉ dành cho những state thực sự global như thông tin xác thực.
  - **Ví dụ về `authStore.ts`:**
    ```typescript
    import { create } from 'zustand';

    interface IAuthState {
      user: User | null;
      token: string | null;
      login: (userData: User, token: string) => void;
      logout: () => void;
    }

    export const useAuthStore = create<IAuthState>((set) => ({
      user: null,
      token: null,
      login: (user, token) => set({ user, token }),
      logout: () => set({ user: null, token: null }),
    }));
    ```
- **State Máy chủ (Server State):** Quản lý qua các **custom hooks** trong thư mục `features/**/hooks/`. Mỗi hook chịu trách nhiệm fetch, cache, và quản lý (loading, error) cho một nguồn dữ liệu cụ thể.
- **State Cục bộ (Local State):** Luôn ưu tiên `useState` cho state của một component.

- **`rightSidebarStore.ts` (Mới):**
  - Đây là store Zustand chịu trách nhiệm quản lý component nào đang được hiển thị ở cột bên phải.
  - **Cấu trúc State:**
    ```typescript
    type PanelType = 'DEFAULT' | 'EXPLORE' | 'NOTIFICATIONS' | 'MESSAGES';

    interface IRightSidebarState {
      activePanel: PanelType;
      setActivePanel: (panel: PanelType) => void;
    }
    ```
  - **Logic:** `SidebarNav` sẽ gọi `setActivePanel` khi một mục được nhấp vào. `RightSidebar` sẽ đọc `activePanel` để quyết định render component nào.


## 4. Routing (React Router v6 & Nested Routes)

- **Mô hình:** Sử dụng `<Outlet />` cho nội dung chính (cột giữa), không còn nested routes cho cột phải.
- **`MainLayout.tsx`:** Là component layout gốc, chứa `SidebarNav`, **khu vực `<Outlet />` cho cột giữa**, và `RightSidebar`.
- **`App.tsx` - Cấu trúc Route mới:**
  ```tsx
  <Routes>
    <Route path="/login" element={<LoginPage />} />
    <Route path="/register" element={<RegisterPage />} />

    {/* Route cha được bảo vệ, render MainLayout */}
    <Route path="/" element={<ProtectedRoute><MainLayout /></ProtectedRoute>}>
      
      {/* Các route con này sẽ được render vào <Outlet /> ở CỘT GIỮA */}
      <Route index element={<FeedPage />} />
      <Route path="profile/:id" element={<ProfilePage />} />
      <Route path="post/:id" element={<PostDetailPage />} />
      {/* Thêm các trang chính khác ở đây */}

    </Route>
  </Routes>

Cấu trúc Component Layout (Cập nhật lớn)
MainLayout.tsx
Vị trí: src/features/layout/components/MainLayout.tsx
Cấu trúc Grid: Vẫn là 3 cột trên desktop.
Cột Trái: Render <SidebarNav />.
Cột Giữa: Render <Outlet /> từ react-router-dom. Đây là nơi FeedPage, ProfilePage, etc., sẽ xuất hiện.
Cột Phải: Render <RightSidebar />.
SidebarNav.tsx
Vị trí: src/features/layout/components/SidebarNav.tsx
Logic Cập nhật:
KHÔNG sử dụng NavLink hoặc Link cho các mục như "Explore", "Notifications".
Thay vào đó, mỗi mục sẽ là một <button> với onClick handler.
onClick sẽ gọi đến action setActivePanel từ rightSidebarStore.
Mục "Home" sẽ dùng useNavigate để điều hướng về /.
Mục "Profile" sẽ dùng useNavigate để điều hướng về /profile/:id.
RightSidebar.tsx
Vị trí: src/features/layout/components/RightSidebar.tsx
Logic Cập nhật:
Component này sẽ "lắng nghe" state activePanel từ rightSidebarStore.
Sử dụng một câu lệnh switch hoặc if/else để render component tương ứng:
Nếu activePanel là 'EXPLORE', render <ExplorePanel />.
Nếu activePanel là 'NOTIFICATIONS', render <NotificationsPanel />.
Mặc định ('DEFAULT'), render <DefaultWidgetsPanel />.

## 5. Styling và Theme (Tailwind CSS)
- Quy ước:
    1. Sử dụng các giá trị đã định nghĩa trong tailwind.config.js (ví dụ: bg-primary) thay vì các giá trị tùy ý.
    2. Sử dụng clsx để ghép các class có điều kiện một cách sạch sẽ.
- Component Variants: Đối với các component phức tạp có nhiều biến thể (ví dụ Button với variant, size), sử dụng thư viện cva (Class Variance Authority) để định nghĩa các biến thể này một cách có tổ chức.
## 6. Giao tiếp với Backend (API Layer)
- Nguyên tắc: Component không bao giờ được biết đến axios.
- Tất cả các lệnh gọi API phải thông qua các hàm được export từ thư mục src/api/.
- Ví dụ về một hàm service trong api/postService.ts:
```tsx
import { api } from './axiosConfig'; // Instance Axios đã cấu hình
import { IPost } from '../features/post/types';
export const getFeedPosts = async (): Promise<IPost[]> => {
  try {
    const response = await api.get<IPost[]>('/posts/feed');
    return response.data;
  } catch (error) {
    // Xử lý lỗi, có thể log hoặc throw lại lỗi đã được định dạng
    console.error("Failed to fetch feed posts:", error);
    throw error;
  }
};
```
