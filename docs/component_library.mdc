# Tài liệu Thư viện Component: Social Blog App

Tài liệu này là bản thiết kế chi tiết cho các component UI chung, tái sử dụng, nằm trong thư mục `src/components/common`.

---

## 1. Nguyên tắc thiết kế

* **Tái sử dụng:** Các component phải được thiết kế để có thể tái sử dụng ở nhiều nơi.
* **Không chứa logic nghiệp vụ:** Các component này không được biết về `Post`, `User` hay bất kỳ logic nghiệp vụ nào. Chúng chỉ nhận props và hiển thị UI.
* **Styling qua Props:** Giao diện của component có thể được tùy chỉnh thông qua props (ví dụ: `variant`, `size`).
* **Khả năng mở rộng:** Cho phép truyền `className` từ bên ngoài để ghi đè hoặc bổ sung style.

---

## 2. Danh sách Component

### 2.1. Button (`src/components/common/Button.tsx`)

* **Mục tiêu:** Một component nút bấm nhất quán trên toàn ứng dụng.
* **Props Interface** (`ButtonProps`):
    ```typescript
    interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
      variant?: 'primary' | 'secondary' | 'danger';
      size?: 'sm' | 'md' | 'lg';
      isLoading?: boolean;
      children: React.ReactNode;
    }
    ```
* **Styling (Tailwind CSS & CVA):**
    * **`primary` (mặc định):** Nền xanh (`bg-blue-600`), chữ trắng (`text-white`), hover tối hơn (`hover:bg-blue-700`).
    * **`secondary`:** Nền trong suốt, viền xám (`border border-gray-300`), chữ đen, hover có nền xám nhạt (`hover:bg-gray-100`).
    * **`danger`:** Nền đỏ (`bg-red-600`), chữ trắng, hover tối hơn (`hover:bg-red-700`).
    * **Khi `isLoading`:** Nút bị vô hiệu hóa (`disabled`), hiển thị component `Spinner` bên trong, và con trỏ chuột `cursor-not-allowed`.
* **Hành vi:** Truyền tất cả các props còn lại (ví dụ `onClick`, `type`) vào thẻ `<button>` gốc.

### 2.2. Input (`src/components/common/Input.tsx`)

* **Mục tiêu:** Một ô nhập liệu chuẩn cho các form.
* **Props Interface** (`InputProps`):
    ```typescript
    interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
      label?: string;
      error?: string;
    }
    ```
* **Cấu trúc:**
    * Một `div` bọc ngoài.
    * Một thẻ `<label>` nếu `label` prop được cung cấp.
    * Thẻ `<input>` chính.
    * Một thẻ `<p>` để hiển thị `error` message nếu có.
* **Styling:**
    * **Input:** Viền xám (`border-gray-300`), bo góc (`rounded-md`), có focus ring màu xanh (`focus:ring-blue-500`).
    * **Khi có lỗi:** Viền chuyển sang màu đỏ (`border-red-500`), focus ring màu đỏ (`focus:ring-red-500`).
    * **Error message:** Chữ nhỏ, màu đỏ (`text-sm text-red-600`).

### 2.3. Spinner (`src/components/common/Spinner.tsx`)

* **Mục tiêu:** Một icon loading để chỉ báo trạng thái tải.
* **Props Interface** (`SpinnerProps`):
    ```typescript
    interface SpinnerProps {
      size?: 'sm' | 'md' | 'lg'; // 'md' is default
    }
    ```
* **Styling:**
    * Một `div` hình tròn (`rounded-full`), có viền trên trong suốt và các viền còn lại có màu (ví dụ `border-t-transparent border-blue-600`).
    * Có animation quay (`animate-spin`).
    * `size` sẽ quyết định `width` và `height` (ví dụ `w-8 h-8`).

### 2.4. Modal (`src/components/common/Modal.tsx`)

* **Mục tiêu:** Một hộp thoại popup để hiển thị nội dung quan trọng hoặc form.
* **Props Interface** (`ModalProps`):
    ```typescript
    interface ModalProps {
      isOpen: boolean;
      onClose: () => void;
      title: string;
      children: React.ReactNode;
    }
    ```
* **Cấu trúc:**
    * Sử dụng **Portal** (`ReactDOM.createPortal`) để render modal ở gốc của body.
    * Một lớp nền mờ (`div` cố định, toàn màn hình, màu đen mờ).
    * Hộp thoại modal chính ở giữa màn hình.
    * Có tiêu đề (`title`) và nút đóng (icon 'X').
* **Hành vi:** Nhấn vào lớp nền mờ hoặc nút 'X' sẽ gọi hàm `onClose`.

## 3. Bố cục và Component "Phân tử"

Đây là các component lớn hơn, định hình cấu trúc và giao diện chính của ứng dụng.

### 3.1. MainLayout (`src/components/layout/MainLayout.tsx`)

- **Mục tiêu:** Tạo ra bố cục 3 cột kinh điển của các mạng xã hội. Bố cục này sẽ bao bọc hầu hết các trang của ứng dụng.
- **Cấu trúc (Desktop):**
  - Một `div` container chính với `max-width` và canh giữa (`max-w-7xl mx-auto`).
  - Sử dụng `grid` của Tailwind CSS để tạo 3 cột (`grid-cols-12 gap-8`).
  - **Cột Trái (Sidebar):** Chiếm 3/12 (`col-span-3`). Đây sẽ là nơi chứa `SidebarNav`.
  - **Cột Giữa (Main Content):** Chiếm 6/12 (`col-span-6`). Đây là nơi nội dung chính của trang sẽ được hiển thị (sử dụng `children` prop).
  - **Cột Phải (Widgets):** Chiếm 3/12 (`col-span-3`). Đây sẽ là nơi chứa các widget như "Who to follow".
- **Cấu trúc (Mobile):**
  - Trên màn hình nhỏ (`< lg`), bố cục chuyển thành 1 cột duy nhất. Cột trái và phải có thể bị ẩn hoặc chuyển xuống dưới.
- **Props:**
  ```typescript
  interface MainLayoutProps {
    children: React.ReactNode;
  }
3.2. SidebarNav (src/features/navigation/components/SidebarNav.tsx)
Mục tiêu: Thanh điều hướng chính ở cột bên trái.
Cấu trúc:
Một div chứa một danh sách (<ul>) các mục điều hướng.
Mỗi mục (<li>) là một NavLink từ react-router-dom.
Các mục bao gồm: "Home", "Explore", "Notifications", "Messages", "Profile".
Mỗi mục có một icon từ react-icons và một nhãn văn bản.
Styling:
Sử dụng flex items-center space-x-4.
Các mục có padding (p-3), bo góc (rounded-full), và hiệu ứng hover (hover:bg-gray-200).
Mục đang được kích hoạt (active class từ NavLink) sẽ có chữ đậm (font-bold).
Tương tác:
Dưới cùng có một nút "Post" lớn, nổi bật (sử dụng component Button với variant='primary').
Hiển thị thông tin người dùng đã đăng nhập (avatar, username) ở dưới cùng.
3.3. PostCard (src/features/post/components/PostCard/PostCard.tsx)
Mục tiêu: Hiển thị một bài viết duy nhất. Đây là component cốt lõi của dòng thời gian.
Cấu trúc:
Container chính (div): Nền trắng (bg-white), viền (border), padding (p-4).
Header: Avatar người dùng, tên người dùng (font-bold), và dấu thời gian (text-sm text-gray-500). Sắp xếp bằng flex.
Body: Nội dung văn bản của bài viết. Nếu có imageUrl, hiển thị hình ảnh bên dưới.
Footer (Action Bar): Dãy các icon (Like, Comment, Share) với số đếm. Sử dụng flex và justify-between.
Props (PostCardProps):
code
TypeScript
interface PostCardProps {
  post: IPost; // IPost là interface cho dữ liệu bài viết từ API
  onLike: (postId: string) => void;
  onComment: (postId: string) => void;
}
### 3.4. CreatePostForm (`src/features/post/components/CreatePostForm.tsx`)

- **Mục tiêu:** Một widget "inline" ở đầu trang Feed, cho phép người dùng soạn và đăng bài viết một cách nhanh chóng.
- **Vị trí:** `src/features/post/components/CreatePostForm.tsx`
- **Cấu trúc:**
  - Một `div` container chính, có nền trắng (`bg-white`), padding (`p-4`), và viền dưới (`border-b`).
  - **Hàng trên (`flex space-x-4`):**
    - `Avatar` của người dùng đang đăng nhập.
    - `textarea` là phần tử chính, chiếm hết không gian còn lại.
  - **`textarea`:**
    - Styling: Không có viền (`border-none`), không có focus ring (`focus:ring-0`), tự động thay đổi chiều cao (`resize-none`), placeholder "What's happening?".
  - **Preview Ảnh (Tùy chọn):**
    - Một `div` sẽ xuất hiện bên dưới `textarea` nếu người dùng đã chọn ảnh.
    - Hiển thị ảnh đã chọn với một nút 'X' ở góc để hủy bỏ.
  - **Hàng dưới (`flex items-center justify-between mt-4`):**
    - **Bên trái (Action Icons):**
      - Một `label` cho thẻ `<input type="file" />` được ẩn đi, style giống như một nút icon (ví dụ: icon "Image" từ `react-icons`).
      - Các icon khác (Emoji, Poll...) có thể thêm sau.
    - **Bên phải (Submit Button):**
      - Component `Button` (từ `common`) với nhãn "Post".
- **State & Logic:**
  - `useState` cho `content` (string) của `textarea`.
  - `useState` cho `imageFile` (File | null) để lưu file ảnh người dùng chọn.
  - `useState` cho `imagePreview` (string | null) để hiển thị ảnh đã chọn.
  - Sử dụng một custom hook `useCreatePost` để xử lý logic gọi API, quản lý trạng thái `isLoading` và `error`.
- **Hành vi & Tương tác:**
  - `textarea` sẽ tự động tăng chiều cao khi người dùng gõ. (Có thể dùng thư viện `react-textarea-autosize`).
  - Khi người dùng chọn một file ảnh, tạo một URL preview bằng `URL.createObjectURL()` và cập nhật state `imagePreview`.
  - Nút "Post" sẽ bị vô hiệu hóa (`disabled`) nếu `content` trống VÀ không có `imageFile`.
  - Khi form được submit:
    1. Gọi hàm `createPost` từ hook `useCreatePost`, truyền vào `content` và `imageFile`.
    2. Hook `useCreatePost` sẽ tạo một `FormData` object để gửi request `multipart/form-data`.
    3. Sau khi post thành công, reset tất cả state của form (xóa content, image).
    4. **Quan trọng:** Phải có cơ chế để cập nhật lại danh sách bài viết trên trang Feed (ví dụ: dùng React Query/SWR để tự động revalidate, hoặc gọi lại hàm fetch posts).

## 4. Widget Components cho Sidebar Phải (Gói 2)

Đây là các component chức năng sẽ được đặt trong cột bên phải của `MainLayout`.

### 4.1. RightSidebar (`src/components/layout/RightSidebar.tsx`)

- **Mục tiêu:** Component container chính cho cột bên phải.
- **Cấu trúc:**
  - Một `div` chính với `flex flex-col space-y-4`.
  - Sẽ chứa các component widget con: `<SearchBar />`, `<FollowSuggestions />`.

### 4.2. SearchBar (`src/features/search/components/SearchBar.tsx`)

- **Mục tiêu:** Một ô tìm kiếm tương tác để tìm kiếm người dùng và bài viết.
- **Cấu trúc:**
  - Một `div` container với `position: relative`.
  - Một `Input` component (từ `common`) với icon kính lúp bên trong.
  - Một `div` khác đóng vai trò là dropdown kết quả, chỉ hiển thị khi có kết quả và ô tìm kiếm đang được focus.
- **State:**
  - `useState` để lưu trữ chuỗi tìm kiếm (`query`).
  - `useState` để lưu trữ kết quả (`results`).
  - `useState` để quản lý trạng thái loading.
- **Hooks:**
  - Sử dụng một custom hook `useDebounce` để tránh gọi API liên tục khi người dùng đang gõ.
- **Logic:**
  1. Khi `query` (đã debounce) thay đổi, gọi đến một custom hook `useSearch(debouncedQuery)`.
  2. `useSearch` sẽ gọi API `GET /api/search?q=...`.
  3. Hiển thị kết quả trong dropdown, được phân nhóm thành "Users" và "Posts".

   **Logic Cập nhật (Tương tác):**
  1.  Dropdown kết quả sẽ được chia thành hai nhóm: "Users" và "Posts".
  2.  Mỗi mục kết quả là một component `SearchResultItem`.
  3.  **Khi nhấp vào một `SearchResultItem` là User:**
      - Sử dụng hook `useNavigate` từ `react-router-dom` để điều hướng đến trang profile của user đó (ví dụ: `/profile/{user._id}`).
      - Sau khi điều hướng, cần xóa nội dung ô tìm kiếm và đóng dropdown.
  4.  **Khi nhấp vào một `SearchResultItem` là Post:**
      - Gọi action `prependPost` từ `feedStore` để thêm bài viết đó vào đầu danh sách trên feed.
      - Xóa nội dung ô tìm kiếm và đóng dropdown.

### 4.3. FollowSuggestions (`src/features/users/components/FollowSuggestions.tsx`)

- **Mục tiêu:** Hiển thị một danh sách các tài khoản được gợi ý để theo dõi.
- **Cấu trúc:**
  - Một `div` card với nền xám nhạt (`bg-gray-100`), bo góc (`rounded-lg`), và padding (`p-4`).
  - Tiêu đề "Who to follow".
  - Một danh sách các `SuggestionItem`.
- **Hooks:**
  - Sử dụng một custom hook `useFollowSuggestions` để fetch dữ liệu từ `GET /api/users/suggestions`.
- **Component con `SuggestionItem`:**
  - **Props:** `user: { _id, username, avatarUrl }`.
  - **Cấu trúc:**
    - `div` với `flex items-center justify-between`.
    - Bên trái: `Avatar` và `username`.
    - Bên phải: `Button` component với `variant='secondary'` và nhãn "Follow".
  - **State & Logic:**
    - Có một state `isFollowing` (mặc định là `false`).
    - Khi nhấn nút "Follow", gọi đến service API `followUser(user._id)`, set `isFollowing` thành `true`, và thay đổi giao diện của nút (ví dụ: thành "Following" và đổi màu).

    ---
## 6. Component Tương tác Phức tạp

### 6.1. UserProfileMenu (`src/features/navigation/components/UserProfileMenu.tsx`)

- **Mục tiêu:** Một menu dropdown (popover) hiển thị khi người dùng nhấp vào thông tin của họ ở cuối sidebar.
- **Thư viện:** `@headlessui/react` (sử dụng component `Menu`).
- **Cấu trúc (sử dụng Headless UI `Menu`):**
  - Một `div` container chính với `position: relative`.
  - **`Menu.Button`:**
    - Đây là phần tử kích hoạt menu.
    - Nó sẽ chứa component `UserInfo` (Avatar, Username).
    - Styling: `cursor-pointer`, hiệu ứng hover (`hover:bg-gray-200`), bo tròn (`rounded-full`), padding (`p-2`).
  - **`Menu.Items`:**
    - Đây là panel dropdown, chỉ hiển thị khi menu được mở.
    - Styling: `position: absolute`, đặt ở phía trên (`bottom-full mb-2`), nền trắng (`bg-white`), bo góc (`rounded-md`), có bóng mờ (`shadow-lg`), viền (`border`), và `z-index` cao.
    - Sẽ chứa một danh sách các `Menu.Item`.
  - **`Menu.Item`:**
    - Mỗi mục là một lựa chọn trong menu.
    - Styling: Phải có trạng thái `active` (khi hover hoặc dùng phím mũi tên) để đổi màu nền (`ui-active:bg-gray-100`).
    - Các mục bao gồm:
      - Link đến trang Profile (`/profile/{userId}`).
      - Lựa chọn "Log out".
- **State & Logic:**
  - Component này sẽ lấy thông tin người dùng (`user`) từ `authStore`.
  - Lựa chọn "Log out" sẽ gọi đến action `logout` từ `authStore`.
- **Component con `UserInfo`:**
  - Một component nhỏ, không có logic, chỉ để hiển thị avatar và username. Sẽ được `UserProfileMenu` sử dụng làm `Menu.Button`.

### 6.2. Cập nhật `SidebarNav.tsx`

- Component `SidebarNav` sẽ không còn chứa logic hiển thị thông tin người dùng trực tiếp.
- Thay vào đó, nó sẽ render component `<UserProfileMenu />` ở vị trí cuối cùng.

## 7. Component Dialog / Modal Chức năng

### 7.1. EditProfileModal (`src/features/profile/components/EditProfileModal.tsx`)

- **Mục tiêu:** Một dialog cho phép người dùng chỉnh sửa thông tin cá nhân của họ (tên hiển thị, tiểu sử, ảnh đại diện, ảnh bìa).
- **Thư viện:** `@headlessui/react` (sử dụng `Dialog` và `Transition`).
- **Props:**
  ```typescript
  interface EditProfileModalProps {
    isOpen: boolean;
    onClose: () => void;
  }
Cấu trúc (sử dụng Headless UI Dialog):
Component Transition bao bọc Dialog để tạo hiệu ứng mờ dần (fade-in/fade-out).
Dialog.Overlay: Lớp nền mờ màu đen phía sau.
Dialog.Panel: Đây là panel dialog chính.
Styling: Nền trắng (bg-white), bo góc (rounded-lg), có bóng (shadow-xl), kích thước tối đa (max-w-lg), chiều rộngเต็ม (w-full), padding (p-6).
Nội dung Panel:
Header:
Dialog.Title với nội dung "Edit Profile".
Một nút đóng (icon 'X') ở góc trên bên phải để gọi onClose.
Form:
Ảnh bìa (Banner Image): Hiển thị ảnh bìa hiện tại, có một nút icon ở giữa để upload ảnh mới.
Ảnh đại diện (Avatar): Hiển thị avatar hiện tại (chồng lên một phần ảnh bìa), cũng có nút icon để upload ảnh mới.
Component Input cho "Display Name".
Component Textarea cho "Bio" (tiểu sử).
Footer:
Nút "Cancel" (gọi onClose).
Nút "Save" (loại submit cho form).
State & Logic:
Component sẽ quản lý trạng thái của form (displayName, bio, các file ảnh mới).
Khi mở, nó sẽ fetch hoặc nhận dữ liệu profile hiện tại của người dùng để điền vào form.
Khi submit, nó sẽ tạo một FormData object để gửi tất cả các thông tin đã thay đổi (bao gồm cả file ảnh nếu có) lên API backend.
Sử dụng một custom hook useUpdateProfile để xử lý logic API, quản lý isLoading và error.
7.2. Tích hợp
State quản lý: Trạng thái isOpen của modal sẽ được quản lý trong component cha (ProfilePanel.tsx) bằng useState.
code
Tsx
const [isEditModalOpen, setIsEditModalOpen] = useState(false);
Kích hoạt: Nút "Edit Profile" trong ProfilePanel.tsx sẽ gọi setIsEditModalOpen(true).
Đóng: EditProfileModal sẽ gọi onClose={() => setIsEditModalOpen(false)} khi cần đóng.

## 8. Components cho Chức năng Bình luận

Đây là các component tạo nên khu vực bình luận bên dưới mỗi bài viết trong `PostCard`.

### 8.1. CommentSection (`src/features/post/components/CommentSection.tsx`)

- **Mục tiêu:** Một component container chính, hiển thị form để viết bình luận và danh sách các bình luận đã có.
- **Vị trí:** Sẽ được render có điều kiện bên trong `PostCard.tsx`.
- **Props:**
  ```typescript
  interface CommentSectionProps {
    postId: string;
  }
Cấu trúc:
Một div container chính với margin-top (mt-4).
Component CommentForm ở trên cùng.
Một div để hiển thị danh sách các CommentItem.
State & Logic:
Sử dụng một custom hook useFetchComments(postId) để lấy danh sách bình luận cho bài viết.
Hook này sẽ quản lý state comments, isLoading, error.
Khi một bình luận mới được gửi thành công (thông qua CommentForm), component này cần cập nhật lại danh sách bình luận.
8.2. CommentForm (src/features/post/components/CommentForm.tsx)
Mục tiêu: Một form "inline" đơn giản để người dùng nhập và gửi bình luận.
Props:
code
TypeScript
interface CommentFormProps {
  postId: string;
  onCommentPosted: (newComment: IComment) => void; // Callback để cập nhật UI ngay lập tức
}
Cấu trúc:
Một div với flex items-start space-x-3.
Avatar của người dùng đang đăng nhập.
Một thẻ <form> chứa:
Input component (từ common) được style như một ô chat, có placeholder "Write a comment...".
Button component (có thể chỉ là icon "Send") để submit.
State & Logic:
useState để quản lý nội dung bình luận (text).
Sử dụng một custom hook useSubmitComment để xử lý logic gọi API POST /api/posts/:id/comments.
Khi gửi thành công, gọi callback onCommentPosted với dữ liệu bình luận mới và reset ô input.
8.3. CommentItem (src/features/post/components/CommentItem.tsx)
Mục tiêu: Hiển thị một bình luận duy nhất.
Props:
code
TypeScript
interface CommentItemProps {
  comment: IComment; // IComment là interface cho dữ liệu bình luận từ API
}
Cấu trúc:
Một div với flex items-start space-x-3.
Avatar của người viết bình luận.
Một div chứa:
Tên người dùng (font-bold).
Nội dung bình luận (text).
Dấu thời gian (text-sm text-gray-500).
8.4. Cập nhật PostCard.tsx
Mục tiêu: Tích hợp CommentSection và quản lý trạng thái hiển thị của nó.
Logic cần thêm:
Tạo một state mới: const [isCommentSectionOpen, setIsCommentSectionOpen] = useState(false);.
Nút icon "Comment" trong Action Bar sẽ có một onClick handler để đảo ngược giá trị của state này: setIsCommentSectionOpen(!isCommentSectionOpen).
Bên dưới Action Bar, render CommentSection một cách có điều kiện:
code
Tsx
{isCommentSectionOpen && <CommentSection postId={post._id} />}

### 8.4. Cập nhật `PostCard.tsx` (Thêm logic Like)

- **Mục tiêu:** Cho phép người dùng thích/bỏ thích một bài viết với phản hồi giao diện ngay lập tức.
- **State & Logic cần thêm:**
  1.  **State cục bộ:** `PostCard` sẽ tự quản lý trạng thái "đã thích" và "số lượt thích" của riêng nó để có thể cập nhật ngay lập tức.
      ```typescript
      const [isLikedByCurrentUser, setIsLikedByCurrentUser] = useState(false);
      const [currentLikeCount, setCurrentLikeCount] = useState(0);
      ```
  2.  **`useEffect` để khởi tạo state:** Khi component được mount hoặc prop `post` thay đổi, một `useEffect` sẽ chạy để kiểm tra xem `user` hiện tại (từ `authStore`) có nằm trong danh sách người đã thích bài viết hay không và đặt giá trị ban đầu cho `isLikedByCurrentUser` và `currentLikeCount`. (Backend cần trả về danh sách người đã thích hoặc ít nhất là `isLikedByCurrentUser`).
  3.  **Hành động `onClick` trên nút Like:**
      - **Optimistic Update:** Ngay lập tức đảo ngược trạng thái `isLikedByCurrentUser` và tăng/giảm `currentLikeCount`.
      - **Gọi API dưới nền:** Gọi đến hàm `toggleLike` từ custom hook `useLikePost`.
      - **Xử lý lỗi (Rollback):** Nếu cuộc gọi API thất bại, đảo ngược lại trạng thái UI về ban đầu và có thể hiển thị một thông báo lỗi.
- **Styling:** Icon "Like" sẽ thay đổi màu sắc (ví dụ: từ xám sang đỏ) và có thể là icon khác (ví dụ: từ trái tim rỗng sang trái tim đầy) dựa trên state `isLikedByCurrentUser`.

---

### 8.5. Custom Hook: `useLikePost` (`src/features/post/hooks/useLikePost.ts`)

- **Mục tiêu:** Đóng gói logic gọi API `POST /api/posts/:id/like` và xử lý các trạng thái.
- **Cấu trúc:**
  - Hook này không cần trả về nhiều state, nó chủ yếu cung cấp một hàm hành động.
  - Trả về một object: `{ toggleLike, isLoading }`.
- **Hàm `toggleLike`:**
  - Là một hàm `async` nhận vào `postId: string`.
  - Nó sẽ gọi đến hàm service API tương ứng.
  - Nó không cần trả về dữ liệu, nhưng có thể `throw error` nếu thất bại để component gọi nó có thể bắt lỗi và rollback UI.


---
## 9. Components cho Trang Profile

Đây là các component tạo nên trang chi tiết thông tin người dùng.

### 9.1. ProfilePage (`src/features/profile/ProfilePage.tsx`)

- **Mục tiêu:** Component trang chính, hiển thị toàn bộ thông tin của một người dùng.
- **Vị trí:** `src/features/profile/ProfilePage.tsx`
- **Routing:** Sẽ được render trong `<Outlet />` của `MainLayout` khi URL là `/profile/:id`.
- **Cấu trúc:**
  - Một `div` container chính.
  - Component `ProfileHeader` ở trên cùng.
  - Một thanh điều hướng (tabs) bên dưới header để chuyển đổi giữa các mục như "Posts", "Likes", "Media" (triển khai sau).
  - Khu vực nội dung chính, ban đầu sẽ hiển thị danh sách các bài viết của người dùng đó (`UserPostsList`).
- **State & Logic:**
  - Sử dụng `useParams` từ `react-router-dom` để lấy `id` của người dùng từ URL.
  - Sử dụng một custom hook `useFetchUserProfile(userId)` để lấy toàn bộ dữ liệu của người dùng từ một API backend mới.
  - Quản lý trạng thái loading và error.

### 9.2. ProfileHeader (`src/features/profile/components/ProfileHeader.tsx`)

- **Mục tiêu:** Component hiển thị phần "đầu trang" của profile, bao gồm ảnh bìa, avatar, tên và các nút hành động.
- **Props:**
  ```typescript
  interface ProfileHeaderProps {
    user: IProfileUser; // IProfileUser là một interface chi tiết cho dữ liệu profile
  }

Cấu trúc:
Một div container.
Ảnh bìa (Banner): Một div hoặc img với ảnh bìa của người dùng. Có một màu nền mặc định.
Khu vực Avatar & Actions (flex justify-between items-end):
Avatar: img lớn, bo tròn, có viền trắng, được đặt chồng lên một phần ảnh bìa (sử dụng margin âm, ví dụ -mt-16).
Nút Hành động:
Logic: So sánh profileUserId với currentUserId (lấy từ authStore).
Nếu là profile của chính mình: Hiển thị nút "Edit Profile" (sử dụng component Button variant='secondary'). Nút này sẽ mở EditProfileModal.
Nếu là profile của người khác: Hiển thị nút "Follow" hoặc "Unfollow".
Thông tin người dùng:
Tên hiển thị (displayName hoặc username) - font-bold, kích thước lớn.
Tên người dùng (@username) - màu xám, kích thước nhỏ.
Tiểu sử (bio).
Thông tin số liệu (flex space-x-4): Ví dụ, "X Following" và "Y Followers".
9.3. FollowButton (src/features/profile/components/FollowButton.tsx)
Mục tiêu: Một component nút chuyên dụng để xử lý logic follow/unfollow.
Props:
code
TypeScript
interface FollowButtonProps {
  targetUserId: string;
  isInitiallyFollowing: boolean;
}
State & Logic:
Sử dụng useState để quản lý trạng thái isFollowing hiện tại, được khởi tạo từ isInitiallyFollowing.
Sử dụng custom hook useFollowToggle để gọi API.
Hành vi:
Khi isFollowing là false, nút hiển thị "Follow". Khi click, gọi followUser(targetUserId) và set isFollowing thành true.
Khi isFollowing là true, nút hiển thị "Following". Khi click, gọi unfollowUser(targetUserId) và set isFollowing thành false.
Quản lý trạng thái isLoading.
9.4. UserPostsList (src/features/profile/components/UserPostsList.tsx)
Mục tiêu: Hiển thị danh sách các bài viết đã được đăng bởi người dùng của trang profile.
Props: userId: string.
Logic: Sử dụng một custom hook useFetchUserPosts(userId) để gọi API lấy bài viết của người dùng đó. Render danh sách các PostCard.